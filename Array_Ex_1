"""
Two Number Sum								
â€¢ {;:]								
Write a function that takes in a non-empty array of distinct integers and an integer representing								
"a target sum. If any two numbers in the input array sum up to the target sum,the function"								
"should return them in an array, in any order. If no two numbers sum up to the target sum, the"								
function should return an empty array.								
Note that the target sum has to be obtained by summing two different integers in the array; you								
can't add a single integer to itself in order to obtain the target sum.								
You can assume that there will be at most one pair of numbers summing up to the target sum.								
Sample Input								
=								
"-1, 6]"								
array								
"[3, s, -4, 8, 11, 1,"								
targetSum								
= 10								

"""
#Solution with O(N ^ 2) complexity
def twoNumberSum(array, targetSum):
    # Write your code here.
    sum=0
    if len(array) > 1:
        print(len(array))
        for x in array:
            for y in array:
                if x!=y:
                    sum = x+y
                    if sum == targetSum:
                        return(x,y)
        #here where all pair added and still not find the match for targetsum
        return([])        
    elif len(array)==1:
        #here array has only one element
        if(array[0] == targetSum):
            return[]
        else:
            return[]
    else:
        #here array i empty

####Solution with O(N ^ 2 ) Complexity but less complex, here y is being looked agaist in array across N element,  if N elements are there so it is O(N) and we are doing this N times hence another O(N)
def twoNumberSum(array, targetSum):
    # Write your code here.
   #create list by converting array into list
    for x in array:
        y= targetSum-x
        if y in array and x != y:
            return [y,x]
    return[]
            
#######Solution with O(N) complexity 
####The time complexity of the given code is O(n), where n is the length of the input array. This is because the code iterates through the array once to create a dictionary, and each dictionary lookup operation takes constant time on average.
######The space complexity of the code is also O(n), where n is the length of the input array. This is because the code creates a dictionary to store the values from the array, and in the worst case scenario, the dictionary can contain all the elements of the array. Therefore, the space required is proportional to the size of the input array.
def twoNumberSum(array, targetSum):
    # Write your code here.
   #create list by converting array into list
    dic1={}
    for x in array:
        y= targetSum-x
        if y in dic1:
            return [y,x]
        else:
            dic1[x] =True
    return[]
######### Solution with O(nlog(n))
#####The time complexity of the revised code is O(n log n), where n is the length of the input array. This is because the code first sorts the array using the array.sort() method, which has a time complexity of O(n log n) in the average case. After sorting the array, the code uses a while loop to iterate through the array from both ends, performing constant-time operations within the loop. Therefore, the dominant factor for the time complexity is the sorting step.

#######The space complexity of the code is O(1) because it only uses a constant amount of additional space to store the variables x, y, and sum. The input array is modified in-place, so no additional space is required for that.
def twoNumberSum(array, targetSum):
    array.sort()
    x=0
    y=len(array)-1
    while(x<y):
            sum=array[x]+array[y]
            if sum < targetSum:
                #print(f' SMALL {array[x]} and {array[y]} sum is={sum} and targetSum is {targetSum}')
                x=x+1
            elif sum >targetSum:
                #print(f' BIG {array[x]} and {array[y]} sum is={sum} and targetSum is {targetSum}')
                y=y-1
            else:
               # print(f' EQUAL {array[x]} and {array[y]} sum is={sum} and targetSum is {targetSum}')
               return(array[x],array[y])
    return([])
